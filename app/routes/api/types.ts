/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/jokes": {
    /** Get all jokes */
    get: {
      responses: {
        /** @description List of jokes */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Joke"][];
            };
          };
        };
      };
    };
  };
  "/jokes/new": {
    /** Create a new joke */
    post: {
      /** @description Joke object to be created */
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewJoke"];
        };
      };
      responses: {
        /** @description Joke created successfully */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Joke"];
            };
          };
        };
      };
    };
  };
  "/jokes/{id}": {
    /** Get a specific joke by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the joke to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description Joke found */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Joke"];
            };
          };
        };
        /** @description Joke not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a specific joke by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the joke to delete */
          id: string;
        };
      };
      responses: {
        /** @description Joke deleted successfully */
        200: {
          content: {
            "application/json": {
              data?: boolean;
            };
          };
        };
        /** @description Joke not found */
        404: {
          content: never;
        };
      };
    };
    /** Update a specific joke by ID */
    patch: {
      parameters: {
        path: {
          /** @description ID of the joke to update */
          id: string;
        };
      };
      /** @description Joke object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateJoke"];
        };
      };
      responses: {
        /** @description Joke updated successfully */
        200: {
          content: {
            "application/json": {
              data?: components["schemas"]["Joke"];
            };
          };
        };
        /** @description Joke not found */
        404: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Joke: {
      id: string;
      title: string;
      imageUrl?: string;
      content: string;
    };
    NewJoke: {
      title: string;
      imageUrl?: string;
      content: string;
    };
    UpdateJoke: {
      title: string;
      imageUrl?: string;
      content: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
